//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebPubApp
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.ComponentModel;
    using System.Data;
    using System.Data.Entity;
    using System.Linq;
    using WebPubApp.Common;
    using System.Net;

    public partial class Publication
    {
        private static Entities db = new Entities();

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Publication()
        {
            this.Authorships = new HashSet<Authorship>();
            this.Keywords = new HashSet<Keyword>();
        }

        [Required(ErrorMessage = "This field cannot be empty")]
        [RegularExpression(@"[0-9]{8}", ErrorMessage = "PMID is an eight-digit unique number")]
        public int PMID { get; set; }
        public string ISSN { get; set; }
        public Nullable<int> TypeID { get; set; }
        [Required(ErrorMessage = "This field cannot be empty")]
        [Display(Name = "Publication title")]
        public string Title { get; set; }
        public Nullable<int> Volume { get; set; }
        [Required(ErrorMessage = "This field cannot be empty")]
        public int Issue { get; set; }
        [Required(ErrorMessage = "This field cannot be empty")]
        public string Pages { get; set; }
        [DataType(DataType.Date)]
        [DisplayFormat(DataFormatString = "{0:yyyy-MM-dd}", ApplyFormatInEditMode = true)]
        public Nullable<System.DateTime> Date { get; set; }
        [Required(ErrorMessage = "This field cannot be empty")]
        [DateCoherence("Date", ErrorMessage = "Year should correspond with the date")]
        public int Year { get; set; }
        public string Link { get; set; }
        public Nullable<bool> Free { get; set; }
        public string Abstract { get; set; }

        public virtual ArticleType ArticleType { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Authorship> Authorships { get; set; }
        public virtual Journal Journal { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Keyword> Keywords { get; set; }

        public override string ToString()
        {
            return $"{Title};{Year};{Free};{ArticleType.Name};{Journal.Title}";

        }
        public static IQueryable<Publication> FindByCountry(IQueryable<Publication> input, int countryId)
        {
            var authorships = db.Authorships.Include(p => p.OrgBranch).Where(s => s.OrgBranch.CountryID == countryId);

            List<int> wantedPMID = new List<int>();
            foreach (var item in authorships)
            {
                wantedPMID.Add(item.PMID);
            }

            return (IQueryable<Publication>)input.Where(x => wantedPMID.Contains(x.PMID));
        }
        public static IQueryable<Publication> FindByOrgBranch(IQueryable<Publication> input, string orgBranch)
        {
            var authorships = db.Authorships.Include(p => p.OrgBranch).Where(a => a.OrgBranch.Title.Contains(orgBranch));

            List<int> wantedPMID = new List<int>();
            foreach (var item in authorships)
            {
                wantedPMID.Add(item.PMID);
            }

            return (IQueryable<Publication>)input.Where(x => wantedPMID.Contains(x.PMID));
        }
        public static IQueryable<Publication> FindByAuthor(IQueryable<Publication> input, string author)
        {
            var authorships = db.Authorships.Include(a => a.Person).Where(a => a.Person.FirstName.Contains(author) || a.Person.SecondName.Contains(author));

            List<int> wantedPMID = new List<int>();
            foreach (var item in authorships)
            {
                wantedPMID.Add(item.PMID);
            }

            return (IQueryable<Publication>)input.Where(x => wantedPMID.Contains(x.PMID));
        }
        public static IQueryable<Publication> FindByKeywords(IQueryable<Publication> publications, string keywords)
        {
            publications.Include(i => i.Keywords);
            string[] keywordsArr = keywords.Split(',');

            List<int> wantedPMID = new List<int>();
            foreach (Publication publication in publications)
            {
                bool foundKeyword = false;
                foreach (Keyword keyword in publication.Keywords)
                {
                    for (int i = 0; i < keywordsArr.Length; i++)
                    {
                        if (keyword.Word.Contains(keywordsArr[i]))
                        {
                            wantedPMID.Add(publication.PMID);
                            foundKeyword = true;
                            break;
                        }
                    }
                    if (foundKeyword) break;
                }
            }
            return (IQueryable<Publication>)publications.Where(x => wantedPMID.Contains(x.PMID));
        }
    }
}
